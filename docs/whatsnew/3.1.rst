.. doctest-skip-all

.. _whatsnew-3.1:

**************************
What's New in Astropy 3.1?
**************************

Overview
========

Astropy 3.1 is a major release that ...  since
the 3.0.x series of releases.

In particular, this release includes:

*

In addition to these major changes, Astropy 3.1 includes a large number of
smaller improvements and bug fixes, which are described in the
:ref:`changelog`. By the numbers:

* xxx issues have been closed since v3.0
* xxx pull requests have been merged since v3.0
* xxx distinct people have contributed code


.. _whatsnew-3.1-tips:

Performance tips
================

.. Mention that these exist

.. _whatsnew-3.1-uncertainty:

New sub-package for uncertainties and distributions
===================================================

.. https://github.com/astropy/astropy/pull/6945


.. _whatsnew-3.1-transit-periodogram:

New transit periodogram
=======================

.. https://github.com/astropy/astropy/pull/7391


.. _whatsnew-3.1-coordinates:

Improvements to astropy.coordinates
===================================

Performance improvements throughout the subpackage.  Highlights include
typically 2-3x faster creation of scalar `~astropy.coordinates.SkyCoord` and
frame classes objects, or up to 20x in certain cases.  These translate to
nearly all convenience methods and operations on coordinates as well. Coordinate
matching  can be 1000x faster in certain cases.

An `~astropy.coordinates.SkyCoord.directional_offset_by` method has been added
that will yield a new `~astropy.coordinates.SkyCoord` given a "from" coordinate
and an offset::

  >>> from astropy import units as u
  >>> from astropy.coordinates import SkyCoord
  >>> c1 = SkyCoord(1*u.deg, 1*u.deg, frame='icrs')
  >>> c1.directional_offset_by(45 * u.deg, 1.414 * u.deg)  # doctest: +FLOAT_CMP
  <SkyCoord (ICRS): (ra, dec) in deg
    (2.0004075, 1.99964588)>

The `~astropy.coordinates.SkyCoord.from_name` method of
`~astropy.coordinates.SkyCoord` now parses  "J-coordinate" names (e.g.
"SDSS J153243.67-004342.5") into their actual coordinate locations.  For
example::

  >>> from astropy.coordinates import SkyCoord
  >>> SkyCoord.from_name('2MASS J06495091-0737408', parse=True)  # doctest: +FLOAT_CMP
  <SkyCoord (ICRS): (ra, dec) in deg
    (102.462125, -7.628)>

Additionally, the `~astropy.coordinates.EarthLocation.of_address` convenience
method now gets coordinates from OpenStreetMap. Google Maps is still supported
but only if you provide your own API key (due to Google new requiring a key) -
see `~astropy.coordinates.EarthLocation.of_address` for more details.

.. https://github.com/astropy/astropy/pull/7830
.. https://github.com/astropy/astropy/pull/7924


.. _whatsnew-3.1-table:

Improvements to Table
=====================

.. https://github.com/astropy/astropy/pull/7481
.. https://github.com/astropy/astropy/pull/7574

.. Time in Table:
.. https://github.com/astropy/astropy/pull/6888
.. https://github.com/astropy/astropy/pull/7897
.. https://github.com/astropy/astropy/pull/6028


.. _whatsnew-3.1-time:

Improvements to Time
====================

.. https://github.com/astropy/astropy/pull/7870
.. https://github.com/astropy/astropy/pull/7705
.. https://github.com/astropy/astropy/pull/7361
.. https://github.com/astropy/astropy/pull/7323

.. _whatsnew-3.1-nddata:

New features in NDData
======================

.. https://github.com/astropy/astropy/pull/6971
.. https://github.com/astropy/astropy/pull/7944


.. _whatsnew-3.1-units:

Improvements and new features in astropy.units
==============================================


.. _whatsnew-3.1-nocopy-unit:

New operator for quantities
---------------------------

.. https://github.com/astropy/astropy/pull/7734


.. _whatsnew-3.1-mag-zero-pt:

Magnitude zero points
---------------------

.. https://github.com/astropy/astropy/pull/7891


.. _whatsnew-3.1-tcmb:

Thermodynamic equilibrium equivalency
-------------------------------------

.. https://github.com/astropy/astropy/pull/7054


.. _whatsnew-3.1-littleh:

Little-h equivalency
--------------------

.. https://github.com/astropy/astropy/pull/7970


.. _whatsnew-3.1-cosmology:

Faster cosmological calculations
================================

Significant speedups (up to 100x) for distance and age calculations
for FlatLambdaCDM cosmologies with no radiation or neutrinos, including
de Sitter and Einstein-de Sitter cosmologies.  For example::

    >> import astropy.units as u
    >> from astropy.cosmology import FlatLambdaCDM
    >> FlatLambdaCDM(H0=60 * u.km / u.sec / u.Mpc, Om0=0.3, Tcmb0=0)
    >> cosmology.age([1.0, 2.0, 3.0])


.. _whatsnew-3.1-visualization:

Improvements to astropy.visualization
=====================================


.. _whatsnew-3.1-wcsaxes:

Improvements in WCSAxes
-----------------------

The WCSAxes framework for making plots of astronomical images with Matplotlib
has been improved in this release - in particular, `Matplotlib styles
<https://matplotlib.org/users/style_sheets.html>`_ (e.g.
``plt.style.use('ggplot')``) and
`rcParams <https://matplotlib.org/users/customizing.html>`_ should now be
correctly taken into account, and the default spacing of tick labels from the
ticks should now be improved. The following shows an example of using the
default, the ``ggplot``, and the ``seaborn`` styles:

.. plot::
   :context: reset
   :align: center

    import matplotlib.pyplot as plt

    from astropy.wcs import WCS
    from astropy.io import fits
    from astropy.utils.data import get_pkg_data_filename

    filename = get_pkg_data_filename('galactic_center/gc_msx_e.fits')

    hdu = fits.open(filename)[0]
    wcs = WCS(hdu.header)

    plt.figure(figsize=(9, 4.5))

    for istyle, style in enumerate([{}, 'ggplot', 'seaborn']):

        plt.style.use(style)

        ax = plt.subplot(1, 3, istyle + 1, projection=wcs)
        ax.imshow(hdu.data, vmin=-2.e-5, vmax=2.e-4, origin='lower')

        if style == {}:
            ax.set_title('Default', size=11)
        else:
            ax.set_title("plt.style.use('{0}')".format(style), size=11)

        ax.set_xlabel('Galactic Longitude')

        if istyle  == 0:
            ax.coords[1].set_axislabel('Galactic Latitude')
        elif istyle == 1:
            ax.coords[1].set_ticklabel_visible(False)
        else:
            ax.coords[1].set_axislabel('Galactic Latitude')
            ax.coords[1].set_ticklabel_position('r')
            ax.coords[1].set_axislabel_position('r')

By default, Right Ascension coordinates will now default to being formatted in
hours rather than in degrees. Finally, there have been a number of
improvements to the API, including for example the ability to use the Matplotlib
`tick_params <https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.tick_params.html>`_
method, the ability to more easily set the
tick labels to be decimal using the ``decimal=True`` option to
:meth:`~astropy.visualization.wcsaxes.CoordinateHelper.set_format_unit`, and
the ability to control whether the ticks should be facing inwards or outwards using
the ``direction='in'/'out'`` argument to :meth:`~astropy.visualization.wcsaxes.CoordinateHelper.set_ticks`.


.. _whatsnew-3.1-imshow-norm:

New convenience function for imshow with ImageNormalize
-------------------------------------------------------

.. https://github.com/astropy/astropy/pull/7785


.. _whatsnew-3.1-ape14:

Common API for World Coordinate Systems
=======================================

We have designed a new general programmatic interface for objects that represent
world coordinate system (WCS) transformations, and astropy's own
:class:`~astropy.wcs.WCS` now implements this interface. One of the highlights
of this interface is the ability to transform to/from astropy objects such as
:class:`~astropy.coordinates.SkyCoord` or :class:`~astropy.units.Quantity`
objects::

    >>> from astropy.wcs import WCS
    >>> from astropy.coordinates import SkyCoord
    >>> from astropy.utils.data import get_pkg_data_filename
    >>> from astropy.io import fits
    >>> filename = get_pkg_data_filename('galactic_center/gc_2mass_k.fits')  # doctest: +REMOTE_DATA
    >>> wcs = WCS(filename)  # doctest: +REMOTE_DATA
    >>> wcs.pixel_to_world([1, 2], [4, 3])  # doctest: +REMOTE_DATA +FLOAT_CMP
    <SkyCoord (FK5: equinox=2000.0): (ra, dec) in deg
        [(266.97242993, -29.42584415), (266.97084321, -29.42723968)]>
    >>> wcs.world_to_pixel(SkyCoord('00h00m00s +00d00m00s', frame='galactic'))  # doctest: +REMOTE_DATA
    [array(356.85179997), array(357.45340331)]

You can find out more about using this new API in :ref:`wcsapi`.

For anyone interested in implementing this interface in other WCS classes, we
recommend reading the  Astropy Proposal for Enhancement 14: `A shared Python
interface for World Coordinate Systems (APE 14)
<https://doi.org/10.5281/zenodo.1188875>`_, and we have provided base classes
defining the API, as well as wrapper classes to help automatically implement the
high-level class.

.. _whatsnew-3.1-prior-modeling:

Prior/posterior constraints in modeling
=======================================

.. https://github.com/astropy/astropy/pull/7558

Improvements to astropy.io.fits
===============================

The ``fitsheader`` command line tool now supports a `dfits+fitsort
<https://www.eso.org/sci/software/eclipse/eug/eug/node8.html>`_ mode,
and the dotted notation for keywords (e.g. ``ESO.INS.ID``)::

   $ fitsheader --fitsort astropy/io/fits/tests/data/test* -k DATE-OBS -k ORIGIN
                  filename               DATE-OBS                 ORIGIN
   ------------------------------------- -------- --------------------------------------
   astropy/io/fits/tests/data/test0.fits 19/05/94 NOAO-IRAF FITS Image Kernel Aug 1 1997
   astropy/io/fits/tests/data/test1.fits 19/05/94 NOAO-IRAF FITS Image Kernel Aug 1 1997

Full change log
===============

To see a detailed list of all changes in version v3.1, including changes in
API, please see the :ref:`changelog`.


Renamed/removed functionality
=============================
